@use "../color-tokens" as *;

// Loop through list and generate values (in sass based syntax)
//Going to do 3 different sets of classes
@each $color in $base-color-tokens {
    //for each color available create a background class
    //The # helps compile the classname as a dynamic variable
    //We assign the background the initial base color and assign a text color generated by our package
    //WE took advantage of sass to create these but for our rule we are outputting the custom css property
    .background-#{$color}{
        background-color: var(--color-#{$color});
        color: var(--color-on-#{$color});
    }

    // Next create color classes where we are only affecting the color property
    // For base color and on color; This gives us full flexibility for applying color variables

    .color-#{$color}{
        color: var(--color-#{$color});
    }
    .color-on-#{$color}{
        color: var(--color-on-#{$color});
    }
}

//Now this will output those various classes

// Set up a local array of values we are using"
$greys: "medium", "light" !default;

// For each loop we are supplying the custom variable and we adjust to ensure contrast
@each $shade in $greys {
  .background-grey-#{$shade} {
    background-color: var(--grey-#{$shade});

    @if ($shade == "medium") {
      color: #fff;
    }
  }
}
