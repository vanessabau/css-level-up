// Configurable
$card-gutter: "1.5rem" !default;
// Not configurable; produced as a variable and we are setting up the card gitter value
$card-gutter-var: "var(--card-gutter, #{$card-gutter})";

.card {
    // Change the display behavior of our card; align items at the start; use gap
    display: flex;
    position: relative;
    flex-direction: column;
    align-items: flex-start;
    gap: var(--card-gap, 1rem);
    border-radius: var(--card-radius, 0.25rem);
    // give base styles to address general card
    // Setup padding properies, gap and border radius
    // Set up a general border and enforce that the cards have a white background
    // Give a little more weight to the visual boundary of our cards and a box shadow
   background-color: var(--card-background, #fff);
    box-shadow: 0 0.25rem 0.45rem -0.15rem rgba(0, 0, 0, 0.5);

  // stylelint-disable-next-line
  // unique trick to override the h3 not following an h2 gets a 2rem margin top 
  // is takes on specificity of the highest specified selector thats included, and we give it a fake id which beats out our previous rule.
  // Useful hack; you can also use 'where' where all the child selectors have zero specificity
  > :is(h3, #override):not(:first-child) {
    margin-top: 0;
  }
// scoping to direct children of the card, remove marginbottom to remove extra space
  > :is(h1, h2, h3, h4) {
    margin-bottom: 0;

    a {
      text-decoration: none;

      &:hover {
        text-decoration: underline;
      }
    }
  }

    // accessible clickable card
    // Any of these headlines now we are selecting the child of them, also the buttons
    // For these we attach a before rule that tells it to cover the available card space
  > :is(h1, h2, h3, h4) a,
  > .button {
    &::before {
      content: "";
      position: absolute;
      top: 0;
      right: 0;
      bottom: 0;
      left: 0;
      // Soon when logical properties are supported - inset: 0;
    }
  }

  // Address the spacing of the cards but we want to make sure the images remain flush to the sides of the cards so we don't want to add padding to the card;
  //Soultion: a series of selectors that only affect the children
> *:not(img) {
    margin-right: #{$card-gutter-var};
    margin-left: #{$card-gutter-var};
  }

  // Address the top and bottom space
  // First child that is not an image; we want to leave it flexible. Maybe it is not a heading element but as long as it is not an image we need to supply the extra space
 > :first-child:not(img) {
    margin-top: #{$card-gutter-var};
  }

  > img:first-child {
    border-radius: var(--card-radius, 0.25rem) var(--card-radius, 0.25rem) 0 0;
  }
  // Then do the reverse - check the last child is not an image, and apply margin-bottom
 > :last-child:not(img) {
    margin-bottom: #{$card-gutter-var};
  }

  > img:last-child {
    border-radius: 0 0 var(--card-radius, 0.25rem) var(--card-radius, 0.25rem);
  }

  // Pushes elements down to the bottom of the card, specifically in flex; the margin will fill space
  > :is(.button, ul):last-child {
    margin-top: auto;
  }

  // Adjust the gap
  .layout-flex {
    --gap: 1rem;
  }
}